name: Release

on:
  push:
    tags:
      - 'v*'

jobs:
  release:
    permissions:
      contents: write
    strategy:
      fail-fast: false
      matrix:
        include:
          - platform: macos-latest
            args: '--target aarch64-apple-darwin'
          - platform: ubuntu-22.04
            args: ''
          - platform: windows-latest
            args: ''
    runs-on: ${{ matrix.platform }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      # Fix Cargo.toml case sensitivity
      - name: Fix workspace structure
        shell: bash
        run: |
          if [ -f "cargo.toml" ] && [ ! -f "Cargo.toml" ]; then
            mv cargo.toml Cargo.toml
          fi
          echo "Workspace contents:"
          ls -la
          echo "Cargo.toml contents:"
          cat Cargo.toml

      - name: Install Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 'lts/*'
          cache: 'npm'
          cache-dependency-path: './ui/package-lock.json'

      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: ${{ matrix.platform == 'macos-latest' && 'aarch64-apple-darwin' || '' }}

      # Linux dependencies
      - name: Install Linux dependencies
        if: matrix.platform == 'ubuntu-22.04'
        run: |
          sudo apt-get update
          sudo apt-get install -y \
            libwebkit2gtk-4.0-dev \
            libwebkit2gtk-4.1-dev \
            libappindicator3-dev \
            librsvg2-dev \
            patchelf \
            libunwind-dev \
            pkg-config \
            cmake \
            build-essential \
            libglib2.0-dev \
            libgstreamer1.0-dev \
            libgstreamer-plugins-base1.0-dev \
            gstreamer1.0-plugins-base \
            gstreamer1.0-plugins-good \
            gstreamer1.0-plugins-bad \
            gstreamer1.0-plugins-ugly

      # macOS dependencies and disable Gatekeeper (for testing only)
      - name: Install macOS dependencies
        if: matrix.platform == 'macos-latest'
        run: |
          brew install gstreamer gst-plugins-base gst-plugins-good gst-plugins-bad gst-plugins-ugly pkg-config glib
          # Create GStreamer framework directories and copy files
          sudo mkdir -p /Library/Frameworks/GStreamer.framework/Versions/Current/lib
          sudo mkdir -p /Library/Frameworks/GStreamer.framework/Versions/Current/lib/pkgconfig
          BREW_PREFIX=$(brew --prefix)
          sudo cp -R $BREW_PREFIX/opt/gstreamer/lib/* /Library/Frameworks/GStreamer.framework/Versions/Current/lib/
          sudo cp -R $BREW_PREFIX/opt/gstreamer/lib/pkgconfig/* /Library/Frameworks/GStreamer.framework/Versions/Current/lib/pkgconfig/
          # Set environment variables for later steps
          echo "PKG_CONFIG_PATH=/Library/Frameworks/GStreamer.framework/Versions/Current/lib/pkgconfig" >> $GITHUB_ENV
          echo "GST_PLUGIN_PATH=/Library/Frameworks/GStreamer.framework/Versions/Current/lib" >> $GITHUB_ENV
          echo "DYLD_FALLBACK_LIBRARY_PATH=/Library/Frameworks/GStreamer.framework/Versions/Current/lib" >> $GITHUB_ENV
          # Disable Gatekeeper (for testing purposes only)
          sudo spctl --master-disable

      # Windows dependencies (single, consolidated step)
      - name: Install Windows dependencies
        if: matrix.platform == 'windows-latest'
        shell: pwsh
        run: |
          Write-Host "Starting GStreamer installation process..."
          # Set version: use "1.22.8" for this example; change to "1.24.12" if desired.
          $gstVer = "1.22.8"
          $tempDir = "C:\gst-temp"
          $installDir = "C:\gstreamer"
          
          # Create necessary directories
          New-Item -ItemType Directory -Force -Path $tempDir | Out-Null
          New-Item -ItemType Directory -Force -Path $installDir | Out-Null

          Write-Host "Downloading installers..."
          $baseUrl = "https://gstreamer.freedesktop.org/data/pkg/windows/$gstVer/msvc"
          $runtimeUrl = "$baseUrl/gstreamer-1.0-msvc-x86_64-$gstVer.msi"
          $develUrl = "$baseUrl/gstreamer-1.0-devel-msvc-x86_64-$gstVer.msi"
          Write-Host "Downloading MSVC 64-bit runtime installer..."
          Invoke-WebRequest -Uri $runtimeUrl -OutFile "$tempDir\gstreamer.msi"
          Write-Host "Downloading MSVC 64-bit development installer..."
          Invoke-WebRequest -Uri $develUrl -OutFile "$tempDir\gstreamer-devel.msi"

          Write-Host "Installing runtime package..."
          $proc = Start-Process msiexec -ArgumentList "/i", "`"$tempDir\gstreamer.msi`"", "INSTALLDIR=$installDir", "/qn" -Wait -PassThru -NoNewWindow
          if ($proc.ExitCode -ne 0) {
            Write-Host "Runtime installation failed with code: $($proc.ExitCode)"
            exit 1
          }

          Write-Host "Installing development package..."
          $proc = Start-Process msiexec -ArgumentList "/i", "`"$tempDir\gstreamer-devel.msi`"", "INSTALLDIR=$installDir", "/qn" -Wait -PassThru -NoNewWindow
          if ($proc.ExitCode -ne 0) {
            Write-Host "Development installation failed with code: $($proc.ExitCode)"
            exit 1
          }
          
          Write-Host "Looking for GStreamer installation..."
          # The MSI installs to C:\gstreamer\1.0\msvc_x86_64
          $expectedPath = "$installDir\1.0\msvc_x86_64"
          $stopwatch = [System.Diagnostics.Stopwatch]::StartNew()
          while (-not (Test-Path $expectedPath)) {
            if ($stopwatch.Elapsed.TotalSeconds -gt 60) {
              Write-Host "Timeout waiting for installation directory. Current structure:"
              Get-ChildItem -Path $installDir -Recurse | Format-List
              exit 1
            }
            Start-Sleep -Seconds 5
            Write-Host "Waiting for installation directory... ($([int]$stopwatch.Elapsed.TotalSeconds)s)"
          }
          Write-Host "Installation directory found: $expectedPath"
          
          # For version 1.22.8, check for the runtime DLL "gstwinrt-1.0-0.dll"
          $dllToCheck = "bin\gstwinrt-1.0-0.dll"
          $fullDllPath = Join-Path $expectedPath $dllToCheck
          if (Test-Path $fullDllPath) {
            Write-Host "Found: $dllToCheck"
          } else {
            Write-Host "Missing critical file: $dllToCheck in $expectedPath"
            Get-ChildItem -Path $expectedPath -Recurse | Format-List
            exit 1
          }
          
          Write-Host "Setting environment variables..."
          $env:GSTREAMER_1_0_ROOT_MSVC_X86_64 = $expectedPath
          $env:GST_PLUGIN_PATH = "$expectedPath\lib\gstreamer-1.0"
          $env:PKG_CONFIG_PATH = "$expectedPath\lib\pkgconfig"
          $env:Path = "$expectedPath\bin;" + $env:Path
          "GSTREAMER_1_0_ROOT_MSVC_X86_64=$expectedPath" | Out-File -FilePath $env:GITHUB_ENV -Append
          "GST_PLUGIN_PATH=$expectedPath\lib\gstreamer-1.0" | Out-File -FilePath $env:GITHUB_ENV -Append
          "PKG_CONFIG_PATH=$expectedPath\lib\pkgconfig" | Out-File -FilePath $env:GITHUB_ENV -Append
          "PATH=$expectedPath\bin;$env:Path" | Out-File -FilePath $env:GITHUB_ENV -Append
          
          Write-Host "GStreamer installation completed successfully."

      - name: Install frontend dependencies
        run: |
          cd ui
          npm install

      - name: Build the app
        uses: tauri-apps/tauri-action@v0
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          PKG_CONFIG_ALLOW_CROSS: 1
        with:
          projectPath: './ui'
          tagName: ${{ github.ref_name }}
          releaseName: 'Scramblery ${{ github.ref_name }}'
          releaseBody: 'See the assets to download and install this version.'
          releaseDraft: false
          prerelease: false
          args: ${{ matrix.args }}

      # Self-sign the macOS app using ad-hoc signing (for testing)
      - name: Self-sign macOS app
        if: matrix.platform == 'macos-latest'
        run: |
          # Adjust the path below to point to your built app bundle
          APP_PATH="./ui/target/release/bundle/macos/scramblery.app"
          echo "Signing app at $APP_PATH"
          codesign --force --deep --sign - "$APP_PATH"
          echo "Verifying signature:"
          spctl --assess --verbose "$APP_PATH"
