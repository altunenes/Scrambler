name: Release
on:
  push:
    tags:
      - 'v*'

jobs:
  release:
    permissions:
      contents: write
    strategy:
      fail-fast: false
      matrix:
        include:
          - platform: macos-latest
            args: '--target aarch64-apple-darwin'
          - platform: ubuntu-22.04
            args: ''
          - platform: windows-latest
            args: ''

    runs-on: ${{ matrix.platform }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      # Fix Cargo.toml case sensitivity
      - name: Fix workspace structure
        shell: bash
        run: |
          if [ -f "cargo.toml" ] && [ ! -f "Cargo.toml" ]; then
            mv cargo.toml Cargo.toml
          fi
          echo "Workspace contents:"
          ls -la
          echo "Cargo.toml contents:"
          cat Cargo.toml

      - name: Install Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 'lts/*'
          cache: 'npm'
          cache-dependency-path: './ui/package-lock.json'

      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: ${{ matrix.platform == 'macos-latest' && 'aarch64-apple-darwin' || '' }}

      # Linux dependencies
      - name: Install Linux dependencies
        if: matrix.platform == 'ubuntu-22.04'
        run: |
          sudo apt-get update
          sudo apt-get install -y \
            libwebkit2gtk-4.0-dev \
            libwebkit2gtk-4.1-dev \
            libappindicator3-dev \
            librsvg2-dev \
            patchelf \
            libunwind-dev \
            pkg-config \
            cmake \
            build-essential \
            libglib2.0-dev \
            libgstreamer1.0-dev \
            libgstreamer-plugins-base1.0-dev \
            gstreamer1.0-plugins-base \
            gstreamer1.0-plugins-good \
            gstreamer1.0-plugins-bad \
            gstreamer1.0-plugins-ugly

      # macOS dependencies
      - name: Install macOS dependencies
        if: matrix.platform == 'macos-latest'
        run: |
          brew install gstreamer gst-plugins-base gst-plugins-good gst-plugins-bad gst-plugins-ugly pkg-config glib
          
          # Create GStreamer framework directory
          sudo mkdir -p /Library/Frameworks/GStreamer.framework/Versions/Current/lib
          sudo mkdir -p /Library/Frameworks/GStreamer.framework/Versions/Current/lib/pkgconfig
          
          # Get Homebrew prefix and copy files
          BREW_PREFIX=$(brew --prefix)
          sudo cp -R $BREW_PREFIX/opt/gstreamer/lib/* /Library/Frameworks/GStreamer.framework/Versions/Current/lib/
          sudo cp -R $BREW_PREFIX/opt/gstreamer/lib/pkgconfig/* /Library/Frameworks/GStreamer.framework/Versions/Current/lib/pkgconfig/
          
          # Set environment variables
          echo "PKG_CONFIG_PATH=/Library/Frameworks/GStreamer.framework/Versions/Current/lib/pkgconfig" >> $GITHUB_ENV
          echo "GST_PLUGIN_PATH=/Library/Frameworks/GStreamer.framework/Versions/Current/lib" >> $GITHUB_ENV
          echo "DYLD_FALLBACK_LIBRARY_PATH=/Library/Frameworks/GStreamer.framework/Versions/Current/lib" >> $GITHUB_ENV

      # Windows dependencies
      - name: Install Windows dependencies
        if: matrix.platform == 'windows-latest'
        shell: pwsh
        run: |
          Write-Host "Starting GStreamer installation process..."
          
          # Set up paths
          $gstVer = "1.22.8"
          $tempDir = "C:\gst-temp"
          $installDir = "C:\gstreamer"
          $finalDir = "C:\gstreamer\1.0\msvc_x86_64"
          
          Write-Host "Creating directories..."
          New-Item -ItemType Directory -Force -Path $tempDir
          New-Item -ItemType Directory -Force -Path $installDir
          
          Write-Host "Downloading installers..."
          $baseUrl = "https://gstreamer.freedesktop.org/data/pkg/windows/$gstVer/msvc"
          $runtimeUrl = "$baseUrl/gstreamer-1.0-msvc-x86_64-$gstVer.msi"
          $develUrl = "$baseUrl/gstreamer-1.0-devel-msvc-x86_64-$gstVer.msi"
          
          Write-Host "Downloading from: $runtimeUrl"
          Invoke-WebRequest -Uri $runtimeUrl -OutFile "$tempDir\gstreamer.msi"
          Write-Host "Downloading from: $develUrl"
          Invoke-WebRequest -Uri $develUrl -OutFile "$tempDir\gstreamer-devel.msi"
          
          Write-Host "Installing runtime..."
          $process = Start-Process msiexec -ArgumentList "/i", "$tempDir\gstreamer.msi", "ADDLOCAL=ALL", "/qn" -Wait -PassThru
          if ($process.ExitCode -ne 0) {
              Write-Host "Runtime installation failed with code: $($process.ExitCode)"
              exit 1
          }
          
          Write-Host "Installing development files..."
          $process = Start-Process msiexec -ArgumentList "/i", "$tempDir\gstreamer-devel.msi", "ADDLOCAL=ALL", "/qn" -Wait -PassThru
          if ($process.ExitCode -ne 0) {
              Write-Host "Development installation failed with code: $($process.ExitCode)"
              exit 1
          }
          
          Write-Host "Setting environment variables..."
          
          Write-Host "Checking installation directory contents:"
          Get-ChildItem -Path $finalDir -Recurse -Include *.dll | Select-Object -First 10 | ForEach-Object {
              Write-Host $_.FullName
          }
          
          # Set environment variables using the known final directory
          $env:GSTREAMER_1_0_ROOT_MSVC_X86_64 = $finalDir
          $env:PKG_CONFIG_PATH = "$finalDir\lib\pkgconfig"
          $env:Path = "$finalDir\bin;$env:Path"
          
          # Set for GitHub Actions environment
          "GSTREAMER_1_0_ROOT_MSVC_X86_64=$finalDir" | Out-File -FilePath $env:GITHUB_ENV -Append
          "PKG_CONFIG_PATH=$finalDir\lib\pkgconfig" | Out-File -FilePath $env:GITHUB_ENV -Append
          "PATH=$finalDir\bin;$env:Path" | Out-File -FilePath $env:GITHUB_ENV -Append
          
          Write-Host "Environment variables set to:"
          Write-Host "GSTREAMER_1_0_ROOT_MSVC_X86_64=$finalDir"
          Write-Host "PKG_CONFIG_PATH=$env:PKG_CONFIG_PATH"
          Write-Host "PATH=$env:Path"
          
          # Verify critical paths
          $paths = @(
              "$finalDir\bin",
              "$finalDir\lib",
              "$finalDir\lib\pkgconfig"
          )
          
          foreach ($path in $paths) {
              if (Test-Path $path) {
                  Write-Host "Found directory: $path"
                  Get-ChildItem $path | Select-Object -First 3 | ForEach-Object {
                      Write-Host "  - $($_.Name)"
                  }
              } else {
                  Write-Host "Missing directory: $path"
                  exit 1
              }
          }
          
          Write-Host "GStreamer installation completed successfully"

      - name: Install frontend dependencies
        run: |
          cd ui
          npm install

      - name: Build the app
        uses: tauri-apps/tauri-action@v0
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          PKG_CONFIG_ALLOW_CROSS: 1
        with:
          projectPath: './ui'
          tagName: ${{ github.ref_name }}
          releaseName: 'Scramblery ${{ github.ref_name }}'
          releaseBody: 'See the assets to download and install this version.'
          releaseDraft: false
          prerelease: false
          args: ${{ matrix.args }}